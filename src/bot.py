import os
import logging
from telegram import Update, ReplyKeyboardMarkup, InputFile
from telegram.ext import (
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
from db import (
    add_user,
    is_user_registered,
    get_user_data
)
from consult import get_consultation
from recipes import generate_recipe_with_openai
from nutrition_agent import generate_nutrition_plan
from src.generate_images import generate_recipe_image
from keyboards import get_main_keyboard

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
NAME, AGE, WEIGHT, GOAL, DISEASES, ALLERGIES = range(6)


# --- –§–£–ù–ö–¶–ò–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ---

async def start_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        if is_user_registered(user.id):
            response_text = "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:"
        else:
            response_text = "üëã –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø—Ä–æ–π–¥—ë–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
            context.user_data["registration_step"] = "NAME"

        if update.message:
            await update.message.reply_text(response_text, reply_markup=get_main_keyboard())
        elif update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.message.edit_text(response_text, reply_markup=get_main_keyboard())

        return NAME if "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é" in response_text else ConversationHandler.END

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
        error_text = "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
        if update.message:
            await update.message.reply_text(error_text)
        elif update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.message.edit_text(error_text)
        return ConversationHandler.END


async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("üìÖ –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    return AGE


async def get_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.text.isdigit():
        await update.message.reply_text("üî¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return AGE
    context.user_data['age'] = update.message.text
    await update.message.reply_text("‚öñÔ∏è –í–∞—à –≤–µ—Å (–≤ –∫–≥)?")
    return WEIGHT


async def get_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    weight = update.message.text.replace(',', '.')
    if not weight.replace('.', '', 1).isdigit():
        await update.message.reply_text("üî¢ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Å–∞!")
        return WEIGHT
    context.user_data['weight'] = weight

    reply_kb = [
        ["–ü–æ—Ö—É–¥–µ–Ω–∏–µ", "–ù–∞–±–æ—Ä –º–∞—Å—Å—ã"],
        ["–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è", "–ü–æ–º–æ—â—å"]
    ]

    await update.message.reply_text(
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–º–æ—â—å'):",
        reply_markup=ReplyKeyboardMarkup(reply_kb, one_time_keyboard=True, resize_keyboard=True)
    )
    return GOAL


async def get_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    goal = update.message.text.strip()
    if goal.lower() == "–ø–æ–º–æ—â—å":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É:", reply_markup=get_main_keyboard())
        return GOAL

    if goal not in ["–ü–æ—Ö—É–¥–µ–Ω–∏–µ", "–ù–∞–±–æ—Ä –º–∞—Å—Å—ã", "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è"]:
        await update.message.reply_text("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–º–æ—â—å'!")
        return GOAL

    context.user_data['goal'] = goal
    await update.message.reply_text("üè• –ï—Å—Ç—å –ª–∏ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è? –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'")
    return DISEASES


async def get_diseases(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['diseases'] = update.message.text
    await update.message.reply_text("üå°Ô∏è –ï—Å—Ç—å –ª–∏ –∞–ª–ª–µ—Ä–≥–∏–∏ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã? –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'")
    return ALLERGIES


async def get_allergies(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = context.user_data
    if add_user(
            telegram_id=update.effective_user.id,
            name=user_data.get('name'),
            age=user_data.get('age'),
            weight=user_data.get('weight'),
            goal=user_data.get('goal'),
            diseases=user_data.get('diseases'),
            allergies=update.message.text
    ):
        await update.message.reply_text("üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=get_main_keyboard())
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
    return ConversationHandler.END


# --- –§–£–ù–ö–¶–ò–ò –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–ò –ò –†–ï–¶–ï–ü–¢–û–í ---

async def ask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        question = " ".join(context.args)
        if not question:
            await update.message.reply_text("‚ùì –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask")
            return
        user_id = update.effective_user.id
        user_data = get_user_data(user_id) if is_user_registered(user_id) else None
        answer = get_consultation(question, user_data=user_data)
        await update.message.reply_text(answer)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ /ask: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")


async def handle_ingredients(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        if not is_user_registered(user_id):
            await update.message.reply_text("‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (/start)")
            return
        ingredients_text = update.message.text.strip()
        if not ingredients_text:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫.")
            return

        user_data = get_user_data(user_id)
        if "?" in ingredients_text or ingredients_text.lower().startswith(
                ("–∫–∞–∫", "—á—Ç–æ", "–ø–æ—á–µ–º—É", "–∫–∞–∫–∏–µ", "–∑–∞—á–µ–º", "–∫—Ç–æ")
        ):
            answer = get_consultation(ingredients_text, user_data=user_data)
            await update.message.reply_text(answer)
            return

        recipe = generate_recipe_with_openai(ingredients=ingredients_text, user_context=user_data)
        if recipe.startswith("‚ö†Ô∏è") or recipe.startswith("‚ùå"):
            await update.message.reply_text(recipe)
            return
        if len(recipe) <= 4000:
            await update.message.reply_text(f"üç≥ –†–µ—Ü–µ–ø—Ç:\n\n{recipe}")
        else:
            await update.message.reply_text("üç≥ –†–µ—Ü–µ–ø—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è—é —á–∞—Å—Ç—è–º–∏...")
            chunk_size = 3000
            for i in range(0, len(recipe), chunk_size):
                chunk = recipe[i:i + chunk_size]
                await update.message.reply_text(chunk)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ —Ä–µ—Ü–µ–ø—Ç–∞:")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üåü *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        "/ask [–≤–æ–ø—Ä–æ—Å] - –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è\n"
        "/nutrition - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è\n"
        "/recipe - –†–µ—Ü–µ–ø—Ç (—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º)\n"
        "/help - –ü–æ–º–æ—â—å\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ."
    )
    await update.message.reply_text(help_text, parse_mode="Markdown", reply_markup=get_main_keyboard())


async def nutrition_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        if not is_user_registered(user.id):
            await update.message.reply_text("‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (/start)")
            return
        user_data = get_user_data(user.id)
        plan = generate_nutrition_plan(user_data)
        await update.message.reply_text(plan, reply_markup=get_main_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /nutrition: {e}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è")


def create_visual_prompt(recipe_text: str) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ —É–∫–∞–∑–∞–Ω–æ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ —Ä–µ—Ü–µ–ø—Ç–∞.
    """
    lines = recipe_text.splitlines()
    if lines:
        # –ò–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞, —É–±–∏—Ä–∞—è —ç–º–æ–¥–∑–∏ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        title = lines[0].strip("üçΩÔ∏è ").strip()
        visual_prompt = (
            f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∞–ø–ø–µ—Ç–∏—Ç–Ω–æ–≥–æ –±–ª—é–¥–∞ '{title}', —Å—Ç—É–¥–∏–π–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, "
            "—è—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–∞—á–∞"
        )
        logger.debug(f"Visual prompt: {visual_prompt}")
        return visual_prompt
    return recipe_text


async def recipe_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        if not is_user_registered(user.id):
            await update.message.reply_text("‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (/start)")
            return
        ingredients_text = update.message.text.strip()
        if not ingredients_text:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã.")
            return

        user_data = get_user_data(user.id)
        recipe_text = generate_recipe_with_openai(ingredients=ingredients_text, user_context=user_data)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        visual_prompt = create_visual_prompt(recipe_text)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å generate_images (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç)
        image_path = generate_recipe_image(visual_prompt)

        if image_path:
            with open(image_path, "rb") as photo:
                await update.message.reply_photo(
                    photo=photo,
                    caption=recipe_text,
                    reply_markup=get_main_keyboard()
                )
        else:
            await update.message.reply_text(
                "‚ö†Ô∏è –†–µ—Ü–µ–ø—Ç –≥–æ—Ç–æ–≤, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n\n" + recipe_text,
                reply_markup=get_main_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /recipe: {e}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞")


async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=get_main_keyboard())


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    command = query.data
    if command == "/start":
        await start_registration(update, context)
    elif command == "/ask":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:")
    elif command == "/nutrition":
        await nutrition_handler(update, context)
    elif command == "/recipe":
        await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–∞:")
    elif command == "/help":
        await help_command(update, context)
    else:
        await query.message.reply_text("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")


async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏–∑ –º–µ–Ω—é.")


def create_conv_handler():
    return ConversationHandler(
        entry_points=[CommandHandler("start", start_registration)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_age)],
            WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_weight)],
            GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_goal)],
            DISEASES: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_diseases)],
            ALLERGIES: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_allergies)]
        },
        fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END)],
        allow_reentry=True
    )


def create_ask_handler():
    return CommandHandler("ask", ask)


def create_help_handler():
    return CommandHandler("help", help_command)


def create_message_handler():
    return MessageHandler(filters.TEXT & ~filters.COMMAND, handle_ingredients)


def create_nutrition_handler():
    return CommandHandler("nutrition", nutrition_handler)


def create_recipe_handler():
    return CommandHandler("recipe", recipe_handler)















