import os
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters
)
from db import (
    add_user,
    is_user_registered,
    get_user_data
)
from consult import get_consultation
from recipes import generate_recipe_with_openai

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
NAME, AGE, WEIGHT, GOAL, DISEASES, ALLERGIES = range(6)

GOAL_KEYBOARD = ReplyKeyboardMarkup(
    [["–ü–æ—Ö—É–¥–µ–Ω–∏–µ", "–ù–∞–±–æ—Ä –º–∞—Å—Å—ã"], ["–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è"]],
    one_time_keyboard=True,
    resize_keyboard=True
)

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram (—Å –∑–∞–ø–∞—Å–æ–º)
MAX_TELEGRAM_MSG_LENGTH = 4000


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        if is_user_registered(user.id):
            await update.message.reply_text("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
            return ConversationHandler.END

        await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø—Ä–æ–π–¥–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        return NAME
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
        return ConversationHandler.END


async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("üìÖ –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    return AGE


async def get_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.text.isdigit():
        await update.message.reply_text("üî¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return AGE
    context.user_data['age'] = update.message.text
    await update.message.reply_text("‚öñÔ∏è –í–∞—à –≤–µ—Å (–≤ –∫–≥)?")
    return WEIGHT


async def get_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    weight = update.message.text.replace(',', '.')
    if not weight.replace('.', '', 1).isdigit():
        await update.message.reply_text("üî¢ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Å–∞!")
        return WEIGHT
    context.user_data['weight'] = weight
    await update.message.reply_text("üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å:", reply_markup=GOAL_KEYBOARD)
    return GOAL


async def get_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    goal = update.message.text
    if goal not in ["–ü–æ—Ö—É–¥–µ–Ω–∏–µ", "–ù–∞–±–æ—Ä –º–∞—Å—Å—ã", "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è"]:
        await update.message.reply_text("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞!")
        return GOAL
    context.user_data['goal'] = goal
    await update.message.reply_text("üè• –ï—Å—Ç—å –ª–∏ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è? –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'")
    return DISEASES


async def get_diseases(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['diseases'] = update.message.text
    await update.message.reply_text("üå°Ô∏è –ï—Å—Ç—å –ª–∏ –∞–ª–ª–µ—Ä–≥–∏–∏? –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'")
    return ALLERGIES


async def get_allergies(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = context.user_data
    if add_user(
            telegram_id=update.effective_user.id,
            name=user_data.get('name'),
            age=user_data.get('age'),
            weight=user_data.get('weight'),
            goal=user_data.get('goal'),
            diseases=user_data.get('diseases'),
            allergies=update.message.text
    ):
        await update.message.reply_text("üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
    return ConversationHandler.END


async def ask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        question = " ".join(context.args)
        if not question:
            await update.message.reply_text("‚ùì –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask")
            return

        answer = get_consultation(question)
        await update.message.reply_text(answer)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ /ask: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")


async def handle_ingredients(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if not is_user_registered(user_id):
            await update.message.reply_text("‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (/start)")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∏ —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        ingredients_text = update.message.text.strip()
        if not ingredients_text:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–ª–ª–µ—Ä–≥–∏–∏, —Ü–µ–ª—å –∏ —Ç.–¥.)
        user_data = get_user_data(user_id)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ü–µ–ø—Ç
        recipe = generate_recipe_with_openai(
            ingredients=ingredients_text,
            user_context=user_data
        )

        # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å ‚ö†Ô∏è –∏–ª–∏ ‚ùå),
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ "–†–µ—Ü–µ–ø—Ç"
        if recipe.startswith("‚ö†Ô∏è") or recipe.startswith("‚ùå"):
            await update.message.reply_text(recipe)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        if len(recipe) <= MAX_TELEGRAM_MSG_LENGTH:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—á–µ –ª–∏–º–∏—Ç–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await update.message.reply_text(f"üç≥ –†–µ—Ü–µ–ø—Ç:\n\n{recipe}")
        else:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –∫—É—Å–æ—á–∫–∞–º
            await update.message.reply_text("üç≥ –†–µ—Ü–µ–ø—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è—é —á–∞—Å—Ç—è–º–∏...")
            chunk_size = 3000  # –º–æ–∂–Ω–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            for i in range(0, len(recipe), chunk_size):
                chunk = recipe[i:i + chunk_size]
                await update.message.reply_text(chunk)

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ —Å–æ —Å—Ç–µ–∫-—Ç—Ä–µ–π—Å–æ–º
        logger.exception("–û—à–∏–±–∫–∞ —Ä–µ—Ü–µ–ø—Ç–∞:")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üåü *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        "/ask [–≤–æ–ø—Ä–æ—Å] - –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è\n"
        "/help - –ü–æ–º–æ—â—å\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞!"
    )
    await update.message.reply_text(help_text, parse_mode="Markdown")


async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help")


# –§–∞–±—Ä–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def create_conv_handler():
    return ConversationHandler(
        entry_points=[CommandHandler("start", start_registration)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_age)],
            WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_weight)],
            GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_goal)],
            DISEASES: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_diseases)],
            ALLERGIES: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_allergies)]
        },
        fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END)],
        allow_reentry=True
    )


def create_ask_handler():
    return CommandHandler("ask", ask)


def create_help_handler():
    return CommandHandler("help", help_command)


def create_message_handler():
    return MessageHandler(filters.TEXT & ~filters.COMMAND, handle_ingredients)





