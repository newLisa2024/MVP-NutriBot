import os
import logging
from telegram import Update, ReplyKeyboardMarkup, InputFile
from telegram.ext import (
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
from db import (
    add_user,
    is_user_registered,
    get_user_data
)
from consult import get_consultation
from recipes import generate_recipe_with_openai
from nutrition_agent import generate_nutrition_plan
from src.generate_images import generate_recipe_image
from keyboards import get_main_keyboard

logger = logging.getLogger(__name__)

# –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:
# 0 - NAME, 1 - AGE, 2 - WEIGHT, 3 - HEIGHT, 4 - ACTIVITY, 5 - GOAL, 6 - DISEASES, 7 - ALLERGIES
NAME, AGE, WEIGHT, HEIGHT, ACTIVITY, GOAL, DISEASES, ALLERGIES = range(8)


# --- –§–£–ù–ö–¶–ò–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ---

async def start_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚Äî
    —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç reply‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    """
    try:
        user = update.effective_user
        if is_user_registered(user.id):
            reply_kb = [
                ["–ü–æ—Ö—É–¥–µ–Ω–∏–µ", "–ù–∞–±–æ—Ä –º–∞—Å—Å—ã"],
                ["–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è", "–ü–æ–º–æ—â—å"]
            ]
            response_text = "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:"
            if update.message:
                await update.message.reply_text(
                    response_text,
                    reply_markup=ReplyKeyboardMarkup(
                        keyboard=reply_kb,
                        one_time_keyboard=False,
                        resize_keyboard=True
                    )
                )
            elif update.callback_query:
                await update.callback_query.answer()
                await update.callback_query.message.edit_text(response_text)
            return ConversationHandler.END
        else:
            response_text = "üëã –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø—Ä–æ–π–¥—ë–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
            context.user_data["registration_step"] = "NAME"
            if update.message:
                await update.message.reply_text(response_text)
            elif update.callback_query:
                await update.callback_query.answer()
                await update.callback_query.message.edit_text(response_text)
            return NAME
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
        error_text = "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
        if update.message:
            await update.message.reply_text(error_text)
        elif update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.message.edit_text(error_text)
        return ConversationHandler.END


async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("üìÖ –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    return AGE


async def get_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.text.isdigit():
        await update.message.reply_text("üî¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return AGE
    context.user_data['age'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70).")
    return WEIGHT


async def get_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    weight = update.message.text.replace(',', '.')
    if not weight.replace('.', '', 1).isdigit():
        await update.message.reply_text("üî¢ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Å–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70).")
        return WEIGHT
    context.user_data['weight'] = weight
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 170).")
    return HEIGHT


async def get_height(update: Update, context: ContextTypes.DEFAULT_TYPE):
    height = update.message.text.replace(',', '.')
    if not height.replace('.', '', 1).isdigit():
        await update.message.reply_text("üî¢ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–æ—Å—Ç–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 170).")
        return HEIGHT
    context.user_data['height'] = height
    # –ó–∞–ø—Ä–æ—Å —É—Ä–æ–≤–Ω—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –≤—ã–±–æ—Ä–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–∞
    reply_kb = [
        ["1Ô∏è‚É£ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π (—Å–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏)"],
        ["2Ô∏è‚É£ –ù–∏–∑–∫–∏–π (1-2 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é)"],
        ["3Ô∏è‚É£ –°—Ä–µ–¥–Ω–∏–π (3-4 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é)"],
        ["4Ô∏è‚É£ –í—ã—Å–æ–∫–∏–π (5-7 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é)"],
        ["5Ô∏è‚É£ –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π (–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏)"]
    ]
    await update.message.reply_text(
        "–ö–∞–∫–æ–π —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏? –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=reply_kb,
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )
    return ACTIVITY


async def get_activity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    activity = update.message.text.strip()
    allowed_options = [
        "1Ô∏è‚É£ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π (—Å–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏)",
        "2Ô∏è‚É£ –ù–∏–∑–∫–∏–π (1-2 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é)",
        "3Ô∏è‚É£ –°—Ä–µ–¥–Ω–∏–π (3-4 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é)",
        "4Ô∏è‚É£ –í—ã—Å–æ–∫–∏–π (5-7 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é)",
        "5Ô∏è‚É£ –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π (–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏)"
    ]
    if activity not in allowed_options:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
        return ACTIVITY
    context.user_data['activity'] = activity
    # –ó–∞–ø—Ä–æ—Å —Ü–µ–ª–∏ —Å reply‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    reply_kb = [
        ["–ü–æ—Ö—É–¥–µ–Ω–∏–µ", "–ù–∞–±–æ—Ä –º–∞—Å—Å—ã"],
        ["–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è", "–ü–æ–º–æ—â—å"]
    ]
    await update.message.reply_text(
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–º–æ—â—å'):",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=reply_kb,
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )
    return GOAL


async def get_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    goal = update.message.text.strip()
    if goal.lower() == "–ø–æ–º–æ—â—å":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É:", reply_markup=get_main_keyboard())
        return GOAL
    if goal not in ["–ü–æ—Ö—É–¥–µ–Ω–∏–µ", "–ù–∞–±–æ—Ä –º–∞—Å—Å—ã", "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è"]:
        await update.message.reply_text("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–º–æ—â—å'!")
        return GOAL
    context.user_data['goal'] = goal
    await update.message.reply_text("üè• –ï—Å—Ç—å –ª–∏ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è? –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'")
    return DISEASES


async def get_diseases(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['diseases'] = update.message.text
    await update.message.reply_text("üå°Ô∏è –ï—Å—Ç—å –ª–∏ –∞–ª–ª–µ—Ä–≥–∏–∏ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã? –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'")
    return ALLERGIES


async def get_allergies(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = context.user_data
    if add_user(
            telegram_id=update.effective_user.id,
            name=user_data.get('name'),
            age=user_data.get('age'),
            weight=user_data.get('weight'),
            height=user_data.get('height'),
            activity=user_data.get('activity'),
            goal=user_data.get('goal'),
            diseases=user_data.get('diseases'),
            allergies=update.message.text
    ):
        reply_kb = [
            ["–ü–æ—Ö—É–¥–µ–Ω–∏–µ", "–ù–∞–±–æ—Ä –º–∞—Å—Å—ã"],
            ["–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è", "–ü–æ–º–æ—â—å"]
        ]
        await update.message.reply_text(
            "üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=reply_kb,
                one_time_keyboard=False,
                resize_keyboard=True
            )
        )
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
    return ConversationHandler.END


# --- –§–£–ù–ö–¶–ò–ò –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–ò –ò –†–ï–¶–ï–ü–¢–û–í ---

async def ask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        question = " ".join(context.args)
        if not question:
            await update.message.reply_text("‚ùì –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask")
            return
        user_id = update.effective_user.id
        user_data = get_user_data(user_id) if is_user_registered(user_id) else None
        answer = get_consultation(question, user_data=user_data)
        await update.message.reply_text(answer)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ /ask: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")


async def recipe_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ /recipe. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏.
    –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.
    """
    try:
        if update.message and update.message.text:
            ingredients_text = update.message.text.strip()
        elif update.callback_query:
            await update.callback_query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–∞:")
            return
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã.")
            return

        if not ingredients_text:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã.")
            return

        user = update.effective_user
        if not is_user_registered(user.id):
            await update.message.reply_text("‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (/start)")
            return

        user_data = get_user_data(user.id)
        recipe_text = generate_recipe_with_openai(ingredients=ingredients_text, user_context=user_data)

        def create_visual_prompt(recipe_text: str) -> str:
            lines = recipe_text.splitlines()
            if lines and lines[0].strip():
                title = lines[0].strip("üçΩÔ∏è ").strip()
                if not title:
                    title = "–±–ª—é–¥–æ"
            else:
                title = "–±–ª—é–¥–æ"
            visual_prompt = (
                f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∞–ø–ø–µ—Ç–∏—Ç–Ω–æ–≥–æ –±–ª—é–¥–∞ '{title}', —Å—Ç—É–¥–∏–π–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, "
                "—è—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–∞—á–∞"
            )
            logger.debug(f"Visual prompt: {visual_prompt}")
            return visual_prompt

        visual_prompt = create_visual_prompt(recipe_text)
        image_path = generate_recipe_image(visual_prompt)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: {image_path}")

        if image_path:
            with open(image_path, "rb") as photo:
                await update.message.reply_photo(
                    photo=photo,
                    caption=recipe_text,
                    reply_markup=get_main_keyboard()
                )
        else:
            await update.message.reply_text(
                "‚ö†Ô∏è –†–µ—Ü–µ–ø—Ç –≥–æ—Ç–æ–≤, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n\n" + recipe_text,
                reply_markup=get_main_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /recipe: {e}", exc_info=True)
        if update.message:
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞")
        elif update.callback_query:
            await update.callback_query.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞")


async def handle_ingredients(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    1) –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–∞ -> recipe_handler
    2) –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ -> –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
    3) –ï—Å–ª–∏ "–ü–æ–º–æ—â—å" -> inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    4) –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ "–ü–æ—Ö—É–¥–µ–Ω–∏–µ"/"–ù–∞–±–æ—Ä –º–∞—Å—Å—ã"/"–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è" -> –ø–æ–≤–µ–¥–µ–Ω–∏–µ "–∫–∞–∫ —Ä–∞–Ω—å—à–µ"
    5) –ï—Å–ª–∏ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å -> –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
    6) –ò–Ω–∞—á–µ fallback
    """
    try:
        user_id = update.effective_user.id
        if not is_user_registered(user_id):
            await update.message.reply_text("‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (/start)")
            return

        user_text = update.message.text.strip()
        if not user_text:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é.")
            return

        # 1) –†–µ–∂–∏–º —Ä–µ—Ü–µ–ø—Ç–∞
        if context.user_data.get("awaiting_recipe"):
            context.user_data["awaiting_recipe"] = False
            await recipe_handler(update, context)
            return

        # 2) –†–µ–∂–∏–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        if context.user_data.get("awaiting_consultation"):
            context.user_data["awaiting_consultation"] = False
            user_data = get_user_data(user_id)
            answer = get_consultation(user_text, user_data=user_data)
            await update.message.reply_text(answer)
            return

        # 3) "–ü–æ–º–æ—â—å"
        if user_text.lower() == "–ø–æ–º–æ—â—å":
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É:", reply_markup=get_main_keyboard())
            return

        # 4) –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ü–æ—Ö—É–¥–µ–Ω–∏–µ"/"–ù–∞–±–æ—Ä –º–∞—Å—Å—ã"/"–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è"
        if user_text in ["–ü–æ—Ö—É–¥–µ–Ω–∏–µ", "–ù–∞–±–æ—Ä –º–∞—Å—Å—ã", "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è"]:
            # –¢–£–¢ –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú "–°–¢–ê–†–û–ï" –ü–û–í–ï–î–ï–ù–ò–ï
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –º–µ–Ω—è–µ–º —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–¥–∞—ë–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏/—Ä–µ—Ü–µ–ø—Ç—ã/–ø–ª–∞–Ω
            user_data = get_user_data(user_id)
            user_data["goal"] = user_text  # –î–æ–ø—É—Å—Ç–∏–º, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω—è–µ—Ç —Ü–µ–ª—å
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –∏–ª–∏ –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
            plan = generate_nutrition_plan(user_data)
            await update.message.reply_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ü–µ–ª—å: {user_text}\n\n" + plan,
                reply_markup=get_main_keyboard()
            )
            return

        # 5) –ï—Å–ª–∏ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å
        if "?" in user_text or user_text.lower().startswith(
            ("–∫–∞–∫", "—á—Ç–æ", "–ø–æ—á–µ–º—É", "–∫–∞–∫–∏–µ", "–∑–∞—á–µ–º", "–∫—Ç–æ", "–º–æ–∂–µ—à—å", "–ø–æ—Å–æ–≤–µ—Ç—É–π")
        ):
            user_data = get_user_data(user_id)
            answer = get_consultation(user_text, user_data=user_data)
            await update.message.reply_text(answer)
            return

        # 6) Fallback
        await update.message.reply_text(
            "–Ø –Ω–µ —É–≤–µ—Ä–µ–Ω–∞, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å. "
            "–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è¬ª –∏–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–º–æ—â—å¬ª. "
            "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç, –Ω–∞–∂–º–∏—Ç–µ ¬´–†–µ—Ü–µ–ø—Ç¬ª –∏–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–º–æ—â—å¬ª."
        )

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞:")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")


    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞:")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üåü *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        "/ask [–≤–æ–ø—Ä–æ—Å] - –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è\n"
        "/nutrition - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è\n"
        "/recipe - –†–µ—Ü–µ–ø—Ç (—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º)\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ."
    )
    if update.message:
        await update.message.reply_text(help_text, parse_mode="Markdown", reply_markup=get_main_keyboard())
    elif update.callback_query:
        await update.callback_query.message.reply_text(help_text, parse_mode="Markdown", reply_markup=get_main_keyboard())


async def nutrition_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        if not is_user_registered(user.id):
            if update.message:
                await update.message.reply_text("‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (/start)")
            elif update.callback_query:
                await update.callback_query.message.reply_text("‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (/start)")
            return
        user_data = get_user_data(user.id)
        plan = generate_nutrition_plan(user_data)
        if update.message:
            await update.message.reply_text(plan, reply_markup=get_main_keyboard())
        elif update.callback_query:
            await update.callback_query.message.reply_text(plan, reply_markup=get_main_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /nutrition: {e}", exc_info=True)
        if update.message:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è")
        elif update.callback_query:
            await update.callback_query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è")


async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=get_main_keyboard())


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    command = query.data
    if command == "/start":
        await start_registration(update, context)
    elif command == "/ask":
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç ‚Äì —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É
        context.user_data["awaiting_consultation"] = True
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:")
    elif command == "/nutrition":
        await nutrition_handler(update, context)
    elif command == "/recipe":
        context.user_data["awaiting_recipe"] = True
        await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–∞:")
    elif command == "/help":
        await help_command(update, context)
    else:
        await query.message.reply_text("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")


async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏–∑ –º–µ–Ω—é.")


def create_conv_handler():
    return ConversationHandler(
        entry_points=[CommandHandler("start", start_registration)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_age)],
            WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_weight)],
            HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_height)],
            ACTIVITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_activity)],
            GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_goal)],
            DISEASES: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_diseases)],
            ALLERGIES: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_allergies)]
        },
        fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END)],
        allow_reentry=True
    )


def create_ask_handler():
    return CommandHandler("ask", ask)


def create_help_handler():
    return CommandHandler("help", help_command)


def create_message_handler():
    return MessageHandler(filters.TEXT & ~filters.COMMAND, handle_ingredients)


def create_nutrition_handler():
    return CommandHandler("nutrition", nutrition_handler)


def create_recipe_handler():
    return CommandHandler("recipe", recipe_handler)





















